 тип ./lib/stripe.ts
Error: 
  [31mx[0m the name `stripe` is exported multiple times
     ,-[[36;1;4m/home/ubuntu/sully-booking-system/app/lib/stripe.ts[0m:5:1]
 [2m  5[0m | 
 [2m  6[0m | // Re-export from the enhanced live implementation
 [2m  7[0m | export {
 [2m  8[0m |   stripe,
     : [31;1m  ^^^|^^[0m
     :      [31;1m`-- [31;1mprevious exported here[0m[0m
 [2m  9[0m |   isLiveMode,
 [2m 10[0m |   isDemoMode,
 [2m 11[0m |   STRIPE_PRICE_IDS,
 [2m 12[0m |   SUBSCRIPTION_PRICING,
 [2m 13[0m |   createStripeCustomer,
 [2m 14[0m |   createSubscription,
 [2m 15[0m |   createCheckoutSession,
 [2m 16[0m |   createBillingPortalSession,
 [2m 17[0m |   createPaymentIntent,
 [2m 18[0m |   updateSubscription,
 [2m 19[0m |   cancelSubscription,
 [2m 20[0m |   retrieveSubscription,
 [2m 21[0m |   constructWebhookEvent,
 [2m 22[0m |   validateStripeConfig,
 [2m 23[0m |   getStripeConfig,
 [2m 24[0m |   formatCurrency,
 [2m 25[0m | } from './stripe-live';
 [2m 26[0m | 
 [2m 27[0m | // Legacy compatibility exports
 [2m 28[0m | const stripe = new Stripe(process.env.STRIPE_SECRET_KEY || 'sk_test_mock_key', {
 [2m 29[0m |   apiVersion: '2025-05-28.basil',
 [2m 30[0m | });
 [2m 31[0m | 
 [2m 32[0m | const isDemoMode = process.env.STRIPE_SECRET_KEY === 'sk_test_mock_key_for_demo' || !process.env.STRIPE_SECRET_KEY || process.env.STRIPE_SECRET_KEY === 'sk_test_mock_key';
 [2m 33[0m | 
 [2m 34[0m | const STRIPE_PRICE_IDS = {
 [2m 35[0m |   PAID: process.env.STRIPE_PAID_PRICE_ID || 'price_paid_mock',
 [2m 36[0m |   PREMIUM: process.env.STRIPE_PREMIUM_PRICE_ID || 'price_premium_mock',
 [2m 37[0m | } as const;
 [2m 38[0m | 
 [2m 39[0m | const SUBSCRIPTION_PRICING = {
 [2m 40[0m |   FREE: {
 [2m 41[0m |     price: 0,
 [2m 42[0m |     currency: 'GBP',
 [2m 43[0m |     interval: 'month',
 [2m 44[0m |     stripePriceId: null,
 [2m 45[0m |   },
 [2m 46[0m |   PAID: {
 [2m 47[0m |     price: 29.99,
 [2m 48[0m |     currency: 'GBP',
 [2m 49[0m |     interval: 'month',
 [2m 50[0m |     stripePriceId: STRIPE_PRICE_IDS.PAID,
 [2m 51[0m |   },
 [2m 52[0m |   PREMIUM: {
 [2m 53[0m |     price: 79.99,
 [2m 54[0m |     currency: 'GBP',
 [2m 55[0m |     interval: 'month',
 [2m 56[0m |     stripePriceId: STRIPE_PRICE_IDS.PREMIUM,
 [2m 57[0m |   },
 [2m 58[0m | } as const;
 [2m 59[0m | 
 [2m 60[0m | export async function createStripeCustomer(email: string, name: string): Promise<Stripe.Customer> {
 [2m 61[0m |   try {
 [2m 62[0m |     if (isDemoMode) {
 [2m 63[0m |       // Return mock customer for demo mode
 [2m 64[0m |       return {
 [2m 65[0m |         id: `cus_demo_${Date.now()}`,
 [2m 66[0m |         email,
 [2m 67[0m |         name,
 [2m 68[0m |         metadata: { source: 'sully_booking_system' },
 [2m 69[0m |         object: 'customer',
 [2m 70[0m |         balance: 0,
 [2m 71[0m |         created: Math.floor(Date.now() / 1000),
 [2m 72[0m |         default_source: null,
 [2m 73[0m |         delinquent: false,
 [2m 74[0m |         description: null,
 [2m 75[0m |         discount: null,
 [2m 76[0m |         invoice_prefix: null,
 [2m 77[0m |         invoice_settings: {
 [2m 78[0m |           custom_fields: null,
 [2m 79[0m |           default_payment_method: null,
 [2m 80[0m |           footer: null,
 [2m 81[0m |           rendering_options: null,
 [2m 82[0m |         },
 [2m 83[0m |         livemode: false,
 [2m 84[0m |         next_invoice_sequence: 1,
 [2m 85[0m |         phone: null,
 [2m 86[0m |         preferred_locales: [],
 [2m 87[0m |         shipping: null,
 [2m 88[0m |         tax_exempt: 'none',
 [2m 89[0m |         test_clock: null,
 [2m 90[0m |       } as Stripe.Customer;
 [2m 91[0m |     }
 [2m 92[0m | 
 [2m 93[0m |     const customer = await stripe.customers.create({
 [2m 94[0m |       email,
 [2m 95[0m |       name,
 [2m 96[0m |       metadata: {
 [2m 97[0m |         source: 'sully_booking_system',
 [2m 98[0m |       },
 [2m 99[0m |     });
 [2m100[0m |     return customer;
 [2m101[0m |   } catch (error) {
 [2m102[0m |     console.error('Error creating Stripe customer:', error);
 [2m103[0m |     throw new Error('Failed to create customer');
 [2m104[0m |   }
 [2m105[0m | }
 [2m106[0m | 
 [2m107[0m | export async function createSubscription(
 [2m108[0m |   customerId: string,
 [2m109[0m |   priceId: string,
 [2m110[0m |   metadata?: Record<string, string>
 [2m111[0m | ): Promise<Stripe.Subscription> {
 [2m112[0m |   try {
 [2m113[0m |     const subscription = await stripe.subscriptions.create({
 [2m114[0m |       customer: customerId,
 [2m115[0m |       items: [{ price: priceId }],
 [2m116[0m |       payment_behavior: 'default_incomplete',
 [2m117[0m |       payment_settings: { save_default_payment_method: 'on_subscription' },
 [2m118[0m |       expand: ['latest_invoice.payment_intent'],
 [2m119[0m |       metadata: metadata || {},
 [2m120[0m |     });
 [2m121[0m |     return subscription;
 [2m122[0m |   } catch (error) {
 [2m123[0m |     console.error('Error creating subscription:', error);
 [2m124[0m |     throw new Error('Failed to create subscription');
 [2m125[0m |   }
 [2m126[0m | }
 [2m127[0m | 
 [2m128[0m | export async function updateSubscription(
 [2m129[0m |   subscriptionId: string,
 [2m130[0m |   newPriceId: string
 [2m131[0m | ): Promise<Stripe.Subscription> {
 [2m132[0m |   try {
 [2m133[0m |     const subscription = await stripe.subscriptions.retrieve(subscriptionId);
 [2m134[0m |     
 [2m135[0m |     const updatedSubscription = await stripe.subscriptions.update(subscriptionId, {
 [2m136[0m |       items: [
 [2m137[0m |         {
 [2m138[0m |           id: subscription.items.data[0].id,
 [2m139[0m |           price: newPriceId,
 [2m140[0m |         },
 [2m141[0m |       ],
 [2m142[0m |       proration_behavior: 'create_prorations',
 [2m143[0m |     });
 [2m144[0m |     
 [2m145[0m |     return updatedSubscription;
 [2m146[0m |   } catch (error) {
 [2m147[0m |     console.error('Error updating subscription:', error);
 [2m148[0m |     throw new Error('Failed to update subscription');
 [2m149[0m |   }
 [2m150[0m | }
 [2m151[0m | 
 [2m152[0m | export async function cancelSubscription(subscriptionId: string): Promise<Stripe.Subscription> {
 [2m153[0m |   try {
 [2m154[0m |     const subscription = await stripe.subscriptions.update(subscriptionId, {
 [2m155[0m |       cancel_at_period_end: true,
 [2m156[0m |     });
 [2m157[0m |     return subscription;
 [2m158[0m |   } catch (error) {
 [2m159[0m |     console.error('Error canceling subscription:', error);
 [2m160[0m |     throw new Error('Failed to cancel subscription');
 [2m161[0m |   }
 [2m162[0m | }
 [2m163[0m | 
 [2m164[0m | export async function reactivateSubscription(subscriptionId: string): Promise<Stripe.Subscription> {
 [2m165[0m |   try {
 [2m166[0m |     const subscription = await stripe.subscriptions.update(subscriptionId, {
 [2m167[0m |       cancel_at_period_end: false,
 [2m168[0m |     });
 [2m169[0m |     return subscription;
 [2m170[0m |   } catch (error) {
 [2m171[0m |     console.error('Error reactivating subscription:', error);
 [2m172[0m |     throw new Error('Failed to reactivate subscription');
 [2m173[0m |   }
 [2m174[0m | }
 [2m175[0m | 
 [2m176[0m | export async function createBillingPortalSession(
 [2m177[0m |   customerId: string,
 [2m178[0m |   returnUrl: string
 [2m179[0m | ): Promise<Stripe.BillingPortal.Session> {
 [2m180[0m |   try {
 [2m181[0m |     if (isDemoMode) {
 [2m182[0m |       // Return mock billing portal session for demo mode
 [2m183[0m |       return {
 [2m184[0m |         id: `bps_demo_${Date.now()}`,
 [2m185[0m |         url: `${returnUrl}?billing_portal=demo&customer=${customerId}`,
 [2m186[0m |         customer: customerId,
 [2m187[0m |         return_url: returnUrl,
 [2m188[0m |       } as Stripe.BillingPortal.Session;
 [2m189[0m |     }
 [2m190[0m | 
 [2m191[0m |     const session = await stripe.billingPortal.sessions.create({
 [2m192[0m |       customer: customerId,
 [2m193[0m |       return_url: returnUrl,
 [2m194[0m |     });
 [2m195[0m |     return session;
 [2m196[0m |   } catch (error) {
 [2m197[0m |     console.error('Error creating billing portal session:', error);
 [2m198[0m |     throw new Error('Failed to create billing portal session');
 [2m199[0m |   }
 [2m200[0m | }
 [2m201[0m | 
 [2m202[0m | export async function createCheckoutSession(
 [2m203[0m |   customerId: string,
 [2m204[0m |   priceId: string,
 [2m205[0m |   successUrl: string,
 [2m206[0m |   cancelUrl: string,
 [2m207[0m |   metadata?: Record<string, string>
 [2m208[0m | ): Promise<Stripe.Checkout.Session> {
 [2m209[0m |   try {
 [2m210[0m |     if (isDemoMode) {
 [2m211[0m |       // Return mock checkout session for demo mode
 [2m212[0m |       return {
 [2m213[0m |         id: `cs_demo_${Date.now()}`,
 [2m214[0m |         url: `${successUrl}?session_id=cs_demo_${Date.now()}&demo=true`,
 [2m215[0m |         customer: customerId,
 [2m216[0m |         metadata: metadata || {},
 [2m217[0m |         mode: 'subscription',
 [2m218[0m |         success_url: successUrl,
 [2m219[0m |         cancel_url: cancelUrl,
 [2m220[0m |       } as Stripe.Checkout.Session;
 [2m221[0m |     }
 [2m222[0m | 
 [2m223[0m |     const session = await stripe.checkout.sessions.create({
 [2m224[0m |       customer: customerId,
 [2m225[0m |       payment_method_types: ['card'],
 [2m226[0m |       line_items: [
 [2m227[0m |         {
 [2m228[0m |           price: priceId,
 [2m229[0m |           quantity: 1,
 [2m230[0m |         },
 [2m231[0m |       ],
 [2m232[0m |       mode: 'subscription',
 [2m233[0m |       success_url: successUrl,
 [2m234[0m |       cancel_url: cancelUrl,
 [2m235[0m |       metadata: metadata || {},
 [2m236[0m |     });
 [2m237[0m |     return session;
 [2m238[0m |   } catch (error) {
 [2m239[0m |     console.error('Error creating checkout session:', error);
 [2m240[0m |     throw new Error('Failed to create checkout session');
 [2m241[0m |   }
 [2m242[0m | }
 [2m243[0m | 
 [2m244[0m | export async function retrieveSubscription(subscriptionId: string): Promise<Stripe.Subscription> {
 [2m245[0m |   try {
 [2m246[0m |     const subscription = await stripe.subscriptions.retrieve(subscriptionId);
 [2m247[0m |     return subscription;
 [2m248[0m |   } catch (error) {
 [2m249[0m |     console.error('Error retrieving subscription:', error);
 [2m250[0m |     throw new Error('Failed to retrieve subscription');
 [2m251[0m |   }
 [2m252[0m | }
 [2m253[0m | 
 [2m254[0m | export async function constructWebhookEvent(
 [2m255[0m |   body: string,
 [2m256[0m |   signature: string,
 [2m257[0m |   secret: string
 [2m258[0m | ): Promise<Stripe.Event> {
 [2m259[0m |   try {
 [2m260[0m |     const event = stripe.webhooks.constructEvent(body, signature, secret);
 [2m261[0m |     return event;
 [2m262[0m |   } catch (error) {
 [2m263[0m |     console.error('Error constructing webhook event:', error);
 [2m264[0m |     throw new Error('Invalid webhook signature');
 [2m265[0m |   }
 [2m266[0m | }
 [2m267[0m | 
 [2m268[0m | export { stripe };
     : [33;1m         ^^^|^^[0m
     :             [33;1m`-- [33;1mexported more than once[0m[0m
     `----

Error: 
  [36m>[0m Exported identifiers must be unique

Import trace for requested module:
./lib/stripe.ts
./components/pricing-plans.tsx
./app/dashboard/subscription/page.tsx
 тип ./lib/stripe.ts
Error: 
  [31mx[0m the name `stripe` is exported multiple times
     ,-[[36;1;4m/home/ubuntu/sully-booking-system/app/lib/stripe.ts[0m:3:1]
 [2m  3[0m | 
 [2m  4[0m | // Re-export everything from the enhanced live implementation
 [2m  5[0m | export {
 [2m  6[0m |   stripe,
     : [31;1m  ^^^|^^[0m
     :      [31;1m`-- [31;1mprevious exported here[0m[0m
 [2m  7[0m |   isLiveMode,
 [2m  8[0m |   isDemoMode,
 [2m  9[0m |   STRIPE_PRICE_IDS,
 [2m 10[0m |   SUBSCRIPTION_PRICING,
 [2m 11[0m |   createStripeCustomer,
 [2m 12[0m |   createSubscription,
 [2m 13[0m |   createCheckoutSession,
 [2m 14[0m |   createBillingPortalSession,
 [2m 15[0m |   createPaymentIntent,
 [2m 16[0m |   updateSubscription,
 [2m 17[0m |   cancelSubscription,
 [2m 18[0m |   retrieveSubscription,
 [2m 19[0m |   constructWebhookEvent,
 [2m 20[0m |   validateStripeConfig,
 [2m 21[0m |   getStripeConfig,
 [2m 22[0m |   formatCurrency,
 [2m 23[0m | } from './stripe-live';
 [2m 24[0m | 
 [2m 25[0m | export async function createStripeCustomer(email: string, name: string): Promise<Stripe.Customer> {
 [2m 26[0m |   try {
 [2m 27[0m |     if (isDemoMode) {
 [2m 28[0m |       // Return mock customer for demo mode
 [2m 29[0m |       return {
 [2m 30[0m |         id: `cus_demo_${Date.now()}`,
 [2m 31[0m |         email,
 [2m 32[0m |         name,
 [2m 33[0m |         metadata: { source: 'sully_booking_system' },
 [2m 34[0m |         object: 'customer',
 [2m 35[0m |         balance: 0,
 [2m 36[0m |         created: Math.floor(Date.now() / 1000),
 [2m 37[0m |         default_source: null,
 [2m 38[0m |         delinquent: false,
 [2m 39[0m |         description: null,
 [2m 40[0m |         discount: null,
 [2m 41[0m |         invoice_prefix: null,
 [2m 42[0m |         invoice_settings: {
 [2m 43[0m |           custom_fields: null,
 [2m 44[0m |           default_payment_method: null,
 [2m 45[0m |           footer: null,
 [2m 46[0m |           rendering_options: null,
 [2m 47[0m |         },
 [2m 48[0m |         livemode: false,
 [2m 49[0m |         next_invoice_sequence: 1,
 [2m 50[0m |         phone: null,
 [2m 51[0m |         preferred_locales: [],
 [2m 52[0m |         shipping: null,
 [2m 53[0m |         tax_exempt: 'none',
 [2m 54[0m |         test_clock: null,
 [2m 55[0m |       } as Stripe.Customer;
 [2m 56[0m |     }
 [2m 57[0m | 
 [2m 58[0m |     const customer = await stripe.customers.create({
 [2m 59[0m |       email,
 [2m 60[0m |       name,
 [2m 61[0m |       metadata: {
 [2m 62[0m |         source: 'sully_booking_system',
 [2m 63[0m |       },
 [2m 64[0m |     });
 [2m 65[0m |     return customer;
 [2m 66[0m |   } catch (error) {
 [2m 67[0m |     console.error('Error creating Stripe customer:', error);
 [2m 68[0m |     throw new Error('Failed to create customer');
 [2m 69[0m |   }
 [2m 70[0m | }
 [2m 71[0m | 
 [2m 72[0m | export async function createSubscription(
 [2m 73[0m |   customerId: string,
 [2m 74[0m |   priceId: string,
 [2m 75[0m |   metadata?: Record<string, string>
 [2m 76[0m | ): Promise<Stripe.Subscription> {
 [2m 77[0m |   try {
 [2m 78[0m |     const subscription = await stripe.subscriptions.create({
 [2m 79[0m |       customer: customerId,
 [2m 80[0m |       items: [{ price: priceId }],
 [2m 81[0m |       payment_behavior: 'default_incomplete',
 [2m 82[0m |       payment_settings: { save_default_payment_method: 'on_subscription' },
 [2m 83[0m |       expand: ['latest_invoice.payment_intent'],
 [2m 84[0m |       metadata: metadata || {},
 [2m 85[0m |     });
 [2m 86[0m |     return subscription;
 [2m 87[0m |   } catch (error) {
 [2m 88[0m |     console.error('Error creating subscription:', error);
 [2m 89[0m |     throw new Error('Failed to create subscription');
 [2m 90[0m |   }
 [2m 91[0m | }
 [2m 92[0m | 
 [2m 93[0m | export async function updateSubscription(
 [2m 94[0m |   subscriptionId: string,
 [2m 95[0m |   newPriceId: string
 [2m 96[0m | ): Promise<Stripe.Subscription> {
 [2m 97[0m |   try {
 [2m 98[0m |     const subscription = await stripe.subscriptions.retrieve(subscriptionId);
 [2m 99[0m |     
 [2m100[0m |     const updatedSubscription = await stripe.subscriptions.update(subscriptionId, {
 [2m101[0m |       items: [
 [2m102[0m |         {
 [2m103[0m |           id: subscription.items.data[0].id,
 [2m104[0m |           price: newPriceId,
 [2m105[0m |         },
 [2m106[0m |       ],
 [2m107[0m |       proration_behavior: 'create_prorations',
 [2m108[0m |     });
 [2m109[0m |     
 [2m110[0m |     return updatedSubscription;
 [2m111[0m |   } catch (error) {
 [2m112[0m |     console.error('Error updating subscription:', error);
 [2m113[0m |     throw new Error('Failed to update subscription');
 [2m114[0m |   }
 [2m115[0m | }
 [2m116[0m | 
 [2m117[0m | export async function cancelSubscription(subscriptionId: string): Promise<Stripe.Subscription> {
 [2m118[0m |   try {
 [2m119[0m |     const subscription = await stripe.subscriptions.update(subscriptionId, {
 [2m120[0m |       cancel_at_period_end: true,
 [2m121[0m |     });
 [2m122[0m |     return subscription;
 [2m123[0m |   } catch (error) {
 [2m124[0m |     console.error('Error canceling subscription:', error);
 [2m125[0m |     throw new Error('Failed to cancel subscription');
 [2m126[0m |   }
 [2m127[0m | }
 [2m128[0m | 
 [2m129[0m | export async function reactivateSubscription(subscriptionId: string): Promise<Stripe.Subscription> {
 [2m130[0m |   try {
 [2m131[0m |     const subscription = await stripe.subscriptions.update(subscriptionId, {
 [2m132[0m |       cancel_at_period_end: false,
 [2m133[0m |     });
 [2m134[0m |     return subscription;
 [2m135[0m |   } catch (error) {
 [2m136[0m |     console.error('Error reactivating subscription:', error);
 [2m137[0m |     throw new Error('Failed to reactivate subscription');
 [2m138[0m |   }
 [2m139[0m | }
 [2m140[0m | 
 [2m141[0m | export async function createBillingPortalSession(
 [2m142[0m |   customerId: string,
 [2m143[0m |   returnUrl: string
 [2m144[0m | ): Promise<Stripe.BillingPortal.Session> {
 [2m145[0m |   try {
 [2m146[0m |     if (isDemoMode) {
 [2m147[0m |       // Return mock billing portal session for demo mode
 [2m148[0m |       return {
 [2m149[0m |         id: `bps_demo_${Date.now()}`,
 [2m150[0m |         url: `${returnUrl}?billing_portal=demo&customer=${customerId}`,
 [2m151[0m |         customer: customerId,
 [2m152[0m |         return_url: returnUrl,
 [2m153[0m |       } as Stripe.BillingPortal.Session;
 [2m154[0m |     }
 [2m155[0m | 
 [2m156[0m |     const session = await stripe.billingPortal.sessions.create({
 [2m157[0m |       customer: customerId,
 [2m158[0m |       return_url: returnUrl,
 [2m159[0m |     });
 [2m160[0m |     return session;
 [2m161[0m |   } catch (error) {
 [2m162[0m |     console.error('Error creating billing portal session:', error);
 [2m163[0m |     throw new Error('Failed to create billing portal session');
 [2m164[0m |   }
 [2m165[0m | }
 [2m166[0m | 
 [2m167[0m | export async function createCheckoutSession(
 [2m168[0m |   customerId: string,
 [2m169[0m |   priceId: string,
 [2m170[0m |   successUrl: string,
 [2m171[0m |   cancelUrl: string,
 [2m172[0m |   metadata?: Record<string, string>
 [2m173[0m | ): Promise<Stripe.Checkout.Session> {
 [2m174[0m |   try {
 [2m175[0m |     if (isDemoMode) {
 [2m176[0m |       // Return mock checkout session for demo mode
 [2m177[0m |       return {
 [2m178[0m |         id: `cs_demo_${Date.now()}`,
 [2m179[0m |         url: `${successUrl}?session_id=cs_demo_${Date.now()}&demo=true`,
 [2m180[0m |         customer: customerId,
 [2m181[0m |         metadata: metadata || {},
 [2m182[0m |         mode: 'subscription',
 [2m183[0m |         success_url: successUrl,
 [2m184[0m |         cancel_url: cancelUrl,
 [2m185[0m |       } as Stripe.Checkout.Session;
 [2m186[0m |     }
 [2m187[0m | 
 [2m188[0m |     const session = await stripe.checkout.sessions.create({
 [2m189[0m |       customer: customerId,
 [2m190[0m |       payment_method_types: ['card'],
 [2m191[0m |       line_items: [
 [2m192[0m |         {
 [2m193[0m |           price: priceId,
 [2m194[0m |           quantity: 1,
 [2m195[0m |         },
 [2m196[0m |       ],
 [2m197[0m |       mode: 'subscription',
 [2m198[0m |       success_url: successUrl,
 [2m199[0m |       cancel_url: cancelUrl,
 [2m200[0m |       metadata: metadata || {},
 [2m201[0m |     });
 [2m202[0m |     return session;
 [2m203[0m |   } catch (error) {
 [2m204[0m |     console.error('Error creating checkout session:', error);
 [2m205[0m |     throw new Error('Failed to create checkout session');
 [2m206[0m |   }
 [2m207[0m | }
 [2m208[0m | 
 [2m209[0m | export async function retrieveSubscription(subscriptionId: string): Promise<Stripe.Subscription> {
 [2m210[0m |   try {
 [2m211[0m |     const subscription = await stripe.subscriptions.retrieve(subscriptionId);
 [2m212[0m |     return subscription;
 [2m213[0m |   } catch (error) {
 [2m214[0m |     console.error('Error retrieving subscription:', error);
 [2m215[0m |     throw new Error('Failed to retrieve subscription');
 [2m216[0m |   }
 [2m217[0m | }
 [2m218[0m | 
 [2m219[0m | export async function constructWebhookEvent(
 [2m220[0m |   body: string,
 [2m221[0m |   signature: string,
 [2m222[0m |   secret: string
 [2m223[0m | ): Promise<Stripe.Event> {
 [2m224[0m |   try {
 [2m225[0m |     const event = stripe.webhooks.constructEvent(body, signature, secret);
 [2m226[0m |     return event;
 [2m227[0m |   } catch (error) {
 [2m228[0m |     console.error('Error constructing webhook event:', error);
 [2m229[0m |     throw new Error('Invalid webhook signature');
 [2m230[0m |   }
 [2m231[0m | }
 [2m232[0m | 
 [2m233[0m | export { stripe };
     : [33;1m         ^^^|^^[0m
     :             [33;1m`-- [33;1mexported more than once[0m[0m
     `----

Error: 
  [36m>[0m Exported identifiers must be unique

Import trace for requested module:
./lib/stripe.ts
./components/pricing-plans.tsx
./app/dashboard/subscription/page.tsx
Error handling subscription created: TypeError: Cannot read properties of undefined (reading 'data')
    at handleSubscriptionCreated (/home/ubuntu/sully-booking-system/app/.next/server/app/api/subscriptions/webhook/route.js:283:60)
    at async POST (/home/ubuntu/sully-booking-system/app/.next/server/app/api/subscriptions/webhook/route.js:218:17)
    at async /home/ubuntu/sully-booking-system/app/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:6:57228
    at async eT.execute (/home/ubuntu/sully-booking-system/app/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:6:46851)
    at async eT.handle (/home/ubuntu/sully-booking-system/app/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:6:58760)
    at async doRender (/home/ubuntu/sully-booking-system/app/node_modules/next/dist/server/base-server.js:1366:42)
    at async cacheEntry.responseCache.get.routeKind (/home/ubuntu/sully-booking-system/app/node_modules/next/dist/server/base-server.js:1588:28)
    at async DevServer.renderToResponseWithComponentsImpl (/home/ubuntu/sully-booking-system/app/node_modules/next/dist/server/base-server.js:1496:28)
    at async DevServer.renderPageComponent (/home/ubuntu/sully-booking-system/app/node_modules/next/dist/server/base-server.js:1924:24)
    at async DevServer.renderToResponseImpl (/home/ubuntu/sully-booking-system/app/node_modules/next/dist/server/base-server.js:1962:32)
    at async DevServer.pipeImpl (/home/ubuntu/sully-booking-system/app/node_modules/next/dist/server/base-server.js:922:25)
    at async NextNodeServer.handleCatchallRenderRequest (/home/ubuntu/sully-booking-system/app/node_modules/next/dist/server/next-server.js:272:17)
    at async DevServer.handleRequestImpl (/home/ubuntu/sully-booking-system/app/node_modules/next/dist/server/base-server.js:818:17)
    at async /home/ubuntu/sully-booking-system/app/node_modules/next/dist/server/dev/next-dev-server.js:339:20
    at async Span.traceAsyncFn (/home/ubuntu/sully-booking-system/app/node_modules/next/dist/trace/trace.js:154:20)
    at async DevServer.handleRequest (/home/ubuntu/sully-booking-system/app/node_modules/next/dist/server/dev/next-dev-server.js:336:24)
    at async invokeRender (/home/ubuntu/sully-booking-system/app/node_modules/next/dist/server/lib/router-server.js:178:21)
    at async handleRequest (/home/ubuntu/sully-booking-system/app/node_modules/next/dist/server/lib/router-server.js:355:24)
    at async requestHandlerImpl (/home/ubuntu/sully-booking-system/app/node_modules/next/dist/server/lib/router-server.js:379:13)
    at async Server.requestListener (/home/ubuntu/sully-booking-system/app/node_modules/next/dist/server/lib/start-server.js:141:13)
/bin/bash: line 1:   365 Killed                  PORT=3000 __NEXT_TEST_MODE=1 NEXT_DIST_DIR=.next yarn run dev
