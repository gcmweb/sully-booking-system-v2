"use strict";(()=>{var e={};e.id=9280,e.ids=[9280],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},54013:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>h,patchFetch:()=>b,requestAsyncStorage:()=>d,routeModule:()=>l,serverHooks:()=>g,staticGenerationAsyncStorage:()=>m});var o={};t.r(o),t.d(o,{GET:()=>c,dynamic:()=>p});var s=t(49303),n=t(88716),i=t(60670),a=t(87070),u=t(9487);let p="force-dynamic";async function c(e){try{let{searchParams:r}=new URL(e.url),t=r.get("email"),o=r.get("phone");if(!t&&!o)return a.NextResponse.json({error:"Email or phone number is required"},{status:400});let s={};t?s.customerEmail=t:o&&(s.customerPhone=o);let n=await u._.booking.findMany({where:s,include:{venue:{select:{id:!0,name:!0,address:!0,city:!0,phone:!0,email:!0}},table:{select:{id:!0,name:!0}}},orderBy:{date:"desc"}});return a.NextResponse.json({bookings:n})}catch(e){return console.error("Get customer bookings error:",e),a.NextResponse.json({error:"Failed to fetch bookings"},{status:500})}}let l=new s.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/customer/bookings/route",pathname:"/api/customer/bookings",filename:"route",bundlePath:"app/api/customer/bookings/route"},resolvedPagePath:"/home/ubuntu/sully-booking-system/app/app/api/customer/bookings/route.ts",nextConfigOutput:"standalone",userland:o}),{requestAsyncStorage:d,staticGenerationAsyncStorage:m,serverHooks:g}=l,h="/api/customer/bookings/route";function b(){return(0,i.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:m})}},9487:(e,r,t)=>{t.d(r,{_:()=>s});var o=t(53524);let s=globalThis.prisma??new o.PrismaClient}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),o=r.X(0,[9276,5972],()=>t(54013));module.exports=o})();