// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  firstName     String
  lastName      String
  phone         String?
  password      String
  role          Role      @default(USER)
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?

  // Subscription fields
  stripeCustomerId   String?   @unique
  subscriptionStatus String? // active, inactive, canceled, past_due
  subscriptionId     String?   @unique
  currentPeriodEnd   DateTime?
  planType           String? // starter, professional, enterprise

  // Relations
  venues           Venue[]
  bookings         Booking[]
  subscriptionLogs SubscriptionLog[]
  subscriptions    Subscription[]
  notifications    Notification[]
  userSessions     UserSession[]

  @@map("users")
}

model Venue {
  id          String  @id @default(cuid())
  name        String
  description String?
  address     String
  city        String
  state       String
  zipCode     String
  postcode    String?
  country     String  @default("US")
  phone       String?
  email       String?
  website     String?

  // Venue details
  capacity     Int?
  pricePerHour Float?
  currency     String @default("USD")
  featured     Boolean @default(false)
  cuisine      String?
  venueType    VenueType?

  // Features and amenities
  amenities String[] // Array of amenity strings

  // Availability
  isActive     Boolean @default(true)
  openingHours Json? // Store opening hours as JSON

  // Location coordinates
  latitude  Float?
  longitude Float?

  // SEO and metadata
  slug            String? @unique
  metaTitle       String?
  metaDescription String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownerId           String
  owner             User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  bookings          Booking[]
  analytics         Analytics[]
  bookingWidgets    BookingWidget[]
  tables            Table[]
  events            Event[]
  venueAvailability VenueAvailability[]
  images            VenueImage[]        @relation("VenueImages")
  venueOpeningHours VenueOpeningHours[]

  @@map("venues")
}

model Booking {
  id String @id @default(cuid())

  // Booking details
  startTime    DateTime
  endTime      DateTime
  totalHours   Float
  pricePerHour Float
  totalAmount  Float
  currency     String   @default("USD")
  
  // Additional booking fields
  partySize    Int?
  serviceType  ServiceType?
  date         DateTime?
  time         String?

  // Customer information
  customerName  String
  customerEmail String
  customerPhone String?

  // Booking status and metadata
  status        BookingStatus @default(PENDING)
  notes         String?
  internalNotes String? // For venue owner use
  isPaid        Boolean       @default(false)
  source        BookingSource @default(DIRECT)

  // Payment information
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String? // stripe, cash, etc.
  paymentIntentId String? // Stripe payment intent ID
  refundAmount    Float? // If partially refunded

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  confirmedAt DateTime?
  cancelledAt DateTime?

  // Relations
  venueId    String
  venue      Venue     @relation(fields: [venueId], references: [id], onDelete: Cascade)
  customerId String?
  customer   User?     @relation(fields: [customerId], references: [id], onDelete: SetNull)
  tableId    String?
  table      Table?    @relation(fields: [tableId], references: [id], onDelete: SetNull)
  payments   Payment[]

  @@map("bookings")
}

model Event {
  id String @id @default(cuid())

  // Event details
  name        String
  description String?
  startTime   DateTime
  endTime     DateTime
  isActive    Boolean @default(true)

  // Event metadata
  capacity    Int?
  price       Float?
  currency    String @default("USD")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@map("events")
}

model SubscriptionLog {
  id String @id @default(cuid())

  // Subscription event details
  eventType     String // subscription_created, subscription_updated, subscription_canceled, etc.
  stripeEventId String? @unique

  // Subscription data
  subscriptionId String
  customerId     String
  status         String
  planType       String?
  amount         Float?
  currency       String  @default("USD")

  // Event metadata
  eventData   Json? // Store full event data as JSON
  processedAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscription_logs")
}

model Payment {
  id String @id @default(cuid())

  // Payment details
  amount            Float
  currency          String        @default("USD")
  status            PaymentStatus @default(PENDING)
  provider          String // STRIPE, PAYPAL, etc.
  providerPaymentId String? // External payment ID

  // Payment metadata
  metadata      Json?
  failureReason String?
  refundAmount  Float?

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  // Relations
  bookingId      String?
  booking        Booking?      @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  subscriptionId String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Analytics {
  id String @id @default(cuid())

  // Analytics data
  venueId  String
  date     DateTime
  metric   String // booking_created, payment_completed, etc.
  value    Float
  metadata Json?

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  venue Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@map("analytics")
}

model BookingWidget {
  id String @id @default(cuid())

  // Widget configuration
  name            String
  isActive        Boolean @default(true)
  theme           String  @default("default")
  primaryColor    String  @default("#3B82F6")
  backgroundColor String  @default("#FFFFFF")
  textColor       String  @default("#1F2937")

  // Widget settings
  allowGuestBooking Boolean @default(true)
  requirePhone      Boolean @default(false)
  maxAdvanceBooking Int     @default(30) // days
  minAdvanceBooking Int     @default(1) // hours

  // Embed settings
  embedCode String?
  customCss String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@map("booking_widgets")
}

model EmailTemplate {
  id String @id @default(cuid())

  // Template details
  name     String  @unique
  subject  String
  htmlBody String
  textBody String?
  isActive Boolean @default(true)

  // Template metadata
  variables Json? // Available template variables

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email_templates")
}

model Notification {
  id String @id @default(cuid())

  // Notification details
  type    NotificationType
  title   String
  message String
  isRead  Boolean          @default(false)

  // Notification metadata
  metadata Json?

  // Timestamps
  createdAt DateTime  @default(now())
  readAt    DateTime?

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Table {
  id String @id @default(cuid())

  // Table details
  name     String
  number   String
  capacity Int
  isActive Boolean @default(true)
  location String? // section, floor, etc.

  // Table metadata
  amenities String[] // window_view, private, etc.

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  venueId  String
  venue    Venue     @relation(fields: [venueId], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@map("tables")
}

model UserSession {
  id String @id @default(cuid())

  // Session details
  token     String   @unique
  expiresAt DateTime
  isActive  Boolean  @default(true)

  // Session metadata
  ipAddress String?
  userAgent String?

  // Timestamps
  createdAt DateTime @default(now())
  lastUsed  DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model VenueAvailability {
  id String @id @default(cuid())

  // Availability details
  dayOfWeek   Int // 0 = Sunday, 1 = Monday, etc.
  startTime   String // HH:MM format
  endTime     String // HH:MM format
  openTime    String // HH:MM format (alias for startTime)
  closeTime   String // HH:MM format (alias for endTime)
  isAvailable Boolean @default(true)

  // Special dates
  specificDate DateTime? // For overriding specific dates

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@unique([venueId, dayOfWeek], name: "venueId_dayOfWeek")
  @@map("venue_availability")
}

model VenueImage {
  id String @id @default(cuid())

  // Image details
  url         String
  alt         String?
  caption     String?
  type        VenueImageType @default(GALLERY)
  isPrimary   Boolean @default(false)
  sortOrder   Int     @default(0)
  isActive    Boolean @default(true)
  displayOrder Int    @default(0)

  // Image metadata
  width    Int?
  height   Int?
  fileSize Int? // in bytes

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  venueId String
  venue   Venue  @relation("VenueImages", fields: [venueId], references: [id], onDelete: Cascade)

  @@map("venue_images")
}

model VenueOpeningHours {
  id String @id @default(cuid())

  // Opening hours details
  dayOfWeek Int // 0 = Sunday, 1 = Monday, etc.
  openTime  String // HH:MM format
  closeTime String // HH:MM format
  isClosed  Boolean @default(false)

  // Special hours
  isHoliday    Boolean   @default(false)
  holidayName  String?
  specificDate DateTime? // For special dates

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@map("venue_opening_hours")
}

model Subscription {
  id String @id @default(cuid())

  // Subscription details
  stripeSubscriptionId String? @unique
  stripeCustomerId     String?
  status               String // active, inactive, canceled, past_due
  planType             String // starter, professional, enterprise
  plan                 SubscriptionPlan @default(STARTER)
  amount               Float
  currency             String  @default("USD")

  // Usage tracking
  bookingsUsed Int @default(0)

  // Billing details
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean   @default(false)
  canceledAt         DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@map("subscriptions")
}

// Enums
enum Role {
  USER
  CUSTOMER
  VENUE_OWNER
  ADMIN
  SUPER_ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PAID
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum NotificationType {
  BOOKING_CONFIRMATION
  BOOKING_REMINDER
  BOOKING_CANCELLED
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  SYSTEM_NOTIFICATION
  SYSTEM_ALERT
  MARKETING
}

enum ServiceType {
  HOURLY
  DAILY
  EVENT
  MEETING
  PARTY
  CONFERENCE
}

enum BookingSource {
  DIRECT
  WIDGET
  API
  ADMIN
}

enum SubscriptionPlan {
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  PAST_DUE
  TRIALING
}

enum VenueImageType {
  MAIN
  GALLERY
  THUMBNAIL
  BANNER
}

enum VenueType {
  RESTAURANT
  BAR
  CAFE
  HOTEL
  EVENT_SPACE
  CONFERENCE_ROOM
  MEETING_ROOM
  COWORKING_SPACE
  OTHER
}

// Indexes for better performance
// These will be created automatically by Prisma
// @@index([email]) on User
// @@index([ownerId]) on Venue
// @@index([venueId, startTime]) on Booking
// @@index([customerId]) on Booking
// @@index([status]) on Booking
// @@index([userId]) on SubscriptionLog
