// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  firstName         String
  lastName          String
  password          String
  role              Role     @default(USER)
  isActive          Boolean  @default(true)
  emailVerified     Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastLoginAt       DateTime?
  
  // Subscription fields
  stripeCustomerId     String?   @unique
  subscriptionStatus   String?   // active, inactive, canceled, past_due
  subscriptionId       String?   @unique
  currentPeriodEnd     DateTime?
  planType            String?   // starter, professional, enterprise
  
  // Relations
  venues            Venue[]
  bookings          Booking[]
  subscriptionLogs  SubscriptionLog[]
  
  @@map("users")
}

model Venue {
  id              String   @id @default(cuid())
  name            String
  description     String?
  address         String
  city            String
  state           String
  zipCode         String
  country         String   @default("US")
  phone           String?
  email           String?
  website         String?
  
  // Venue details
  capacity        Int?
  pricePerHour    Float?
  currency        String   @default("USD")
  
  // Features and amenities
  amenities       String[] // Array of amenity strings
  images          String[] // Array of image URLs
  
  // Availability
  isActive        Boolean  @default(true)
  openingHours    Json?    // Store opening hours as JSON
  
  // Location coordinates
  latitude        Float?
  longitude       Float?
  
  // SEO and metadata
  slug            String?  @unique
  metaTitle       String?
  metaDescription String?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  ownerId         String
  owner           User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  bookings        Booking[]
  
  @@map("venues")
}

model Booking {
  id              String      @id @default(cuid())
  
  // Booking details
  startTime       DateTime
  endTime         DateTime
  totalHours      Float
  pricePerHour    Float
  totalAmount     Float
  currency        String      @default("USD")
  
  // Customer information
  customerName    String
  customerEmail   String
  customerPhone   String?
  
  // Booking status and metadata
  status          BookingStatus @default(PENDING)
  notes           String?
  internalNotes   String?     // For venue owner use
  
  // Payment information
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?     // stripe, cash, etc.
  paymentIntentId String?     // Stripe payment intent ID
  refundAmount    Float?      // If partially refunded
  
  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  confirmedAt     DateTime?
  cancelledAt     DateTime?
  
  // Relations
  venueId         String
  venue           Venue       @relation(fields: [venueId], references: [id], onDelete: Cascade)
  customerId      String?
  customer        User?       @relation(fields: [customerId], references: [id], onDelete: SetNull)
  
  @@map("bookings")
}

model SubscriptionLog {
  id              String   @id @default(cuid())
  
  // Subscription event details
  eventType       String   // subscription_created, subscription_updated, subscription_canceled, etc.
  stripeEventId   String?  @unique
  
  // Subscription data
  subscriptionId  String
  customerId      String
  status          String
  planType        String?
  amount          Float?
  currency        String   @default("USD")
  
  // Event metadata
  eventData       Json?    // Store full event data as JSON
  processedAt     DateTime @default(now())
  
  // Relations
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("subscription_logs")
}

// Enums
enum Role {
  USER
  VENUE_OWNER
  ADMIN
  SUPER_ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

// Indexes for better performance
// These will be created automatically by Prisma
// @@index([email]) on User
// @@index([ownerId]) on Venue
// @@index([venueId, startTime]) on Booking
// @@index([customerId]) on Booking
// @@index([status]) on Booking
// @@index([userId]) on SubscriptionLog